"""empty message

Revision ID: d160791cb20a
Revises: 
Create Date: 2024-07-07 20:01:15.984378

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector


# revision identifiers, used by Alembic.
revision = 'd160791cb20a'
down_revision = None
branch_labels = None
depends_on = None

def column_exists(connection, table_name, column_name):
    inspector = Inspector.from_engine(connection)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    with op.batch_alter_table('pieces', schema=None) as batch_op:
        if not column_exists(conn, 'pieces', 'possible_moves'):
            batch_op.add_column(sa.Column('possible_moves', postgresql.JSON(astext_type=sa.Text()), nullable=True))
        if not column_exists(conn, 'pieces', 'board_id'):
            batch_op.add_column(sa.Column('board_id', sa.Integer(), nullable=False))
            batch_op.create_foreign_key(None, 'board', ['board_id'], ['id'])
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('pieces', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_column('board_id')
        batch_op.drop_column('possible_moves')

    # ### end Alembic commands ###
